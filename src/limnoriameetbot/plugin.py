# -*- coding: utf-8 -*-
# vim: set ft=python ts=4 sw=4 expandtab:
# pylint: disable=too-many-ancestors:

# Note: this is boilerplate code generated by supybot-plugin-create

from supybot import callbacks, utils

# from supybot import callbacks, ircutils, plugins, utils
# from supybot.commands import *

import random

from supybot.commands import wrap, additional, many

try:
    from supybot.i18n import PluginInternationalization

    _ = PluginInternationalization("Meetbot")
except ImportError:
    # Placeholder that allows to run the plugin on a bot
    # without the i18n module
    _ = lambda x: x


class Meetbot(callbacks.Plugin):  # type: ignore
    """Plugin for Limnoria to help run IRC meetings"""

    def __init__(self, irc):
        super().__init__(irc)  # KJP:used modern style here after PyCharm complaint
        # self.__parent = super(Meetbot, self)
        # self.__parent.__init__(irc)
        self.rng = random.Random()  # create our rng
        self.rng.seed()  # automatically seeds with current time

    def random(self, irc, msg, args):
        """takes no arguments

        Returns the next random number from the random number generator.
        """
        irc.reply(str(self.rng.random()))

    random = wrap(random)

    def seed(self, irc, msg, args, seed):
        """<seed>

        Sets the internal RNG's seed value to <seed>.  <seed> must be a
        floating point number.
        """
        self.rng.seed(seed)
        irc.replySuccess()

    seed = wrap(seed, ['float'])

    def sample(self, irc, msg, args, n, items):
        """<number of items> <item1> [<item2> ...]

        Returns a sample of the <number of items> taken from the remaining
        arguments.  Obviously <number of items> must be less than the number
        of arguments given.
        """
        if n > len(items):
            irc.error('<number of items> must be less than the number '
                      'of arguments.')
            return
        sample = self.rng.sample(items, n)
        sample.sort()
        irc.reply(utils.str.commaAndify(sample))

    sample = wrap(sample, ['int', many('anything')])

    def diceroll(self, irc, msg, args, n):
        """[<number of sides>]

        Rolls a die with <number of sides> sides.  The default number of sides
        is 6.
        """
        s = 'rolls a %s' % self.rng.randrange(1, n)
        irc.reply(s, action=True)

    diceroll = wrap(diceroll, [additional(('int', 'number of sides'), 6)])


Class = Meetbot
