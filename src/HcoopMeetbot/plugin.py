# -*- coding: utf-8 -*-
# vim: set ft=python ts=4 sw=4 expandtab:
# pylint: disable=too-many-ancestors,unused-argument,invalid-name:

# Note: this is boilerplate code generated by supybot-plugin-create

import random

from supybot import callbacks, utils

# from supybot.commands import *
from supybot.commands import additional, many, wrap

try:
    from supybot.i18n import PluginInternationalization

    _ = PluginInternationalization("HcoopMeetbot")
except ImportError:
    # Placeholder that allows to run the plugin on a bot
    # without the i18n module
    _ = lambda x: x


class HcoopMeetbot(callbacks.Plugin):  # type: ignore
    """This plugin provides a few random number commands and some
    commands for getting random samples.  Use the "seed" command to seed
    the plugin's random number generator if you like, though it is
    unnecessary as it gets seeded upon loading of the plugin.  The
    "random" command is most likely what you're looking for, though
    there are a number of other useful commands in this plugin.  Use
    'list random' to check them out."""

    def __init__(self, irc):  # type: ignore
        super().__init__(irc)
        self.rng = random.Random()  # create our rng
        self.rng.seed()  # automatically seeds with current time

    def random(self, irc, msg, args):  # type: ignore
        """takes no arguments

        Returns the next random number from the random number generator.
        """
        irc.reply(str(self.rng.random()))

    random = wrap(random)

    def seed(self, irc, msg, args, seed):  # type: ignore
        """<seed>

        Sets the internal RNG's seed value to <seed>.  <seed> must be a
        floating point number.
        """
        self.rng.seed(seed)
        irc.replySuccess()

    seed = wrap(seed, ["float"])

    def sample(self, irc, msg, args, n, items):  # type: ignore
        """<number of items> <item1> [<item2> ...]

        Returns a sample of the <number of items> taken from the remaining
        arguments.  Obviously <number of items> must be less than the number
        of arguments given.
        """
        if n > len(items):
            irc.error("<number of items> must be less than the number " "of arguments.")
            return
        sample = self.rng.sample(items, n)
        sample.sort()
        irc.reply(utils.str.commaAndify(sample))

    sample = wrap(sample, ["int", many("anything")])

    def diceroll(self, irc, msg, args, n):  # type: ignore
        """[<number of sides>]

        Rolls a die with <number of sides> sides.  The default number of sides
        is 6.
        """
        result = "rolls a %s" % self.rng.randrange(1, n)
        irc.reply(result, action=True)

    diceroll = wrap(diceroll, [additional(("int", "number of sides"), 6)])


Class = HcoopMeetbot
